<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TDrunk</title>
  
  <subtitle>Had I not seen the sun, I could have borne the shade</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://RosamondTao.github.io/"/>
  <updated>2018-12-06T13:55:25.489Z</updated>
  <id>https://RosamondTao.github.io/</id>
  
  <author>
    <name>TDrunk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git与github使用总结</title>
    <link href="https://RosamondTao.github.io/2018/12/06/git%E4%B8%8Egithub%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://RosamondTao.github.io/2018/12/06/git与github使用总结/</id>
    <published>2018-12-06T13:24:42.000Z</published>
    <updated>2018-12-06T13:55:25.489Z</updated>
    
    <content type="html"><![CDATA[<p>Git是目前世界上最先进的分布式版本控制系统。<br>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</p><a id="more"></a><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h3><p>首先cd到需要建为仓库的目录下，执行</p><pre><code>$ git init</code></pre><p><img src="/2018/12/06/git与github使用总结/git1.png" alt="git1"></p><p>以上即为创建空仓库成功，此时该目录下将出现一个.git目录(默认隐藏)。</p><p>这里首先须知git版本控制系统一个非常重要的内容，方便后面命令的理解，用一张图表示如下：<br><img src="/2018/12/06/git与github使用总结/git0.png" alt="git0"></p><p>其中工作区即为电脑中要创建仓库的目录（即为我这里使用的/e/GIT/learngit目录），当成功创建仓库后，形成的.git目录，即为Git的版本库。</p><h3 id="2-添加或删除文件到版本库"><a href="#2-添加或删除文件到版本库" class="headerlink" title="2. 添加或删除文件到版本库"></a>2. 添加或删除文件到版本库</h3><p>此过程需要两步。<br>(1) 添加文件到仓库或从仓库删除已有文件（从工作区到暂存区）</p><pre><code>$ git add tips.txt</code></pre><p><img src="/2018/12/06/git与github使用总结/git2.png" alt="git2"></p><pre><code>$ git rm test.txt</code></pre><p>执行后若没有提示即为添加文件成功</p><p>(2) 提交文件到仓库（从暂存区到分支）</p><pre><code>$ git commit -m &quot;wrote a tips file&quot;</code></pre><p><img src="/2018/12/06/git与github使用总结/git3.png" alt="git3"><br>-m 后的为输入的本次提交说明，这样你就能从历史记录里方便地找到改动记录。</p><h3 id="3-查看工作区当前状态与具体修改内容"><a href="#3-查看工作区当前状态与具体修改内容" class="headerlink" title="3. 查看工作区当前状态与具体修改内容"></a>3. 查看工作区当前状态与具体修改内容</h3><p>对tips.txt做修改，加入一行文字，然后执行如下命令查看状态。</p><pre><code>$ git status</code></pre><p><img src="/2018/12/06/git与github使用总结/git4.png" alt="git4"><br>结果如上图，显示tips.txt被修改，但没有提交。如需知道具体修改了什么，执行如下命令：</p><pre><code>$ git diff</code></pre><p><img src="/2018/12/06/git与github使用总结/git5.png" alt="git5">  </p><p>然后首先add再commit,提交完成后再查看工作区状态如下：<br><img src="/2018/12/06/git与github使用总结/git6.png" alt="git6">  </p><p>注意：</p><ul><li>要随时掌握工作区的状态，使用git status命令。</li><li>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</li></ul><h3 id="4-版本回退与恢复"><a href="#4-版本回退与恢复" class="headerlink" title="4. 版本回退与恢复"></a>4. 版本回退与恢复</h3><p>首先需要知道，每个版本都有一个版本号，我们可以通过每个版本的版本号来改变指针指向，从而做到版本之间的穿梭。<br>查看版本号的方法：</p><pre><code>$ git log</code></pre><p><img src="/2018/12/06/git与github使用总结/git7.png" alt="git7"><br>一种更漂亮的输出方式：<br><img src="/2018/12/06/git与github使用总结/git8.png" alt="git8"> </p><p>其中黄色的一大串的十六进制数字即为版本号commit_id。通过版本号利用如下命令可以穿梭到任何版本：</p><pre><code>$ git reset --hard commit_id</code></pre><p>除此外，一种相对当前版本的穿梭方式为使用HEAD^(上一版本)，HEAD^^(上上版本)……</p><pre><code>$ git reset --hard HEAD^</code></pre><p><img src="/2018/12/06/git与github使用总结/git9.png" alt="git9"> </p><p>若已经回退回之前版本，再使用git log则不会显示回退到的版本之后的版本，此时可使用如下命令查看之前操作，查阅版本号：</p><pre><code>$ git reflog</code></pre><p><img src="/2018/12/06/git与github使用总结/git10.png" alt="git10"><br>其中，蓝色框部分即为新版本(modifytest2)的commit_id号，要从老版本到新版本只需再执行git reset即可。</p><h3 id="5-工作区与暂存区修改回退（丢弃修改）"><a href="#5-工作区与暂存区修改回退（丢弃修改）" class="headerlink" title="5. 工作区与暂存区修改回退（丢弃修改）"></a>5. 工作区与暂存区修改回退（丢弃修改）</h3><p>若需回退的文件还在工作区，并未add到暂存区，则除了手动删除刚才的修改（包括删除文件等操作）或者使用ctrl+z以外，可以使用如下命令恢复：</p><pre><code>$ git checkout -- tips.txt</code></pre><p>意思为将tips.txt文件在工作区的修改全部撤销，即回到最近一次commit或add时的状态。</p><p>若需回退的文件已add到了暂存区，则可使用如下命令将暂存区的修改撤销，重新放回工作区：</p><pre><code>$ git reset HEAD tips.txt</code></pre><p>然后再按照前面所说工作区的清除方式撤销修改。</p><p>ps:若已经commit，则使用版本回退方式。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>远程仓库使用github，这里默认你已经有了一个github账户。</p><h3 id="1-SSH-key创建与使用"><a href="#1-SSH-key创建与使用" class="headerlink" title="1. SSH key创建与使用"></a>1. SSH key创建与使用</h3><p>(1) 创建SSH key。<br>在用户主目录下，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><pre><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></pre><p>邮件地址换为自己地址后，一路回车即可。成功后在用户主目录下会生成一个.ssh目录，目录中有里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>(2) 将公钥告知github<br>GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。具体方法如下图：<br><img src="/2018/12/06/git与github使用总结/git11.png" alt="git11"> </p><h3 id="2-添加远程库"><a href="#2-添加远程库" class="headerlink" title="2. 添加远程库"></a>2. 添加远程库</h3><p>在github页面，“Create a new repo”创建一个新的仓库，命名(最好与要关联的本地仓库命名一样方便管理)后，“Create repository”即可创建成功。如下图：<br><img src="/2018/12/06/git与github使用总结/git12.png" alt="git12"> </p><p>(1) 将本地仓库关联到远程库</p><pre><code>$ git remote add origin git@github.com:RosamondTao/learngit.git</code></pre><p>(2) 推送本地内容到远程库上</p><pre><code>$ git push -u origin master</code></pre><p><img src="/2018/12/06/git与github使用总结/git13.png" alt="git13"> </p><p>第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化该命令为：</p><pre><code>$ git push origin master</code></pre><p>(3) 将远程仓库克隆到本地<br>现有本地库，再有远程库，则使用以上方法关联。若从零开始创建远程库，再要有一个本地的仓库的话，则需要从远程库克隆，使用如下命令：</p><pre><code>$ git clone git@github.com:RosamondTao/gitskills.git</code></pre><p><img src="/2018/12/06/git与github使用总结/git14.png" alt="git14"></p><h2 id="git分支-基础操作"><a href="#git分支-基础操作" class="headerlink" title="git分支(基础操作)"></a>git分支(基础操作)</h2><h3 id="1-查看分支："><a href="#1-查看分支：" class="headerlink" title="1. 查看分支："></a>1. 查看分支：</h3><pre><code>$ git branch</code></pre><h3 id="2-创建分支："><a href="#2-创建分支：" class="headerlink" title="2. 创建分支："></a>2. 创建分支：</h3><pre><code>$ git branch &lt;name&gt;</code></pre><h3 id="3-切换分支："><a href="#3-切换分支：" class="headerlink" title="3. 切换分支："></a>3. 切换分支：</h3><pre><code>$ git checkout &lt;name&gt;</code></pre><h3 id="4-创建-切换分支："><a href="#4-创建-切换分支：" class="headerlink" title="4. 创建+切换分支："></a>4. 创建+切换分支：</h3><pre><code>$ git checkout -b &lt;name&gt;</code></pre><h3 id="5-合并某分支到当前分支："><a href="#5-合并某分支到当前分支：" class="headerlink" title="5. 合并某分支到当前分支："></a>5. 合并某分支到当前分支：</h3><pre><code>$ git merge &lt;name&gt;</code></pre><h3 id="6-删除分支："><a href="#6-删除分支：" class="headerlink" title="6. 删除分支："></a>6. 删除分支：</h3><pre><code>$ git branch -d &lt;name&gt;</code></pre><h2 id="参与开源项目"><a href="#参与开源项目" class="headerlink" title="参与开源项目"></a>参与开源项目</h2><p>详见廖雪峰的网站<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137628548491051ccfaef0ccb470894c858999603fedf000" target="_blank" rel="noopener">使用GitHub</a></p><p>以上为本人学习github的一些总结，只满足于本人目前简单的需求。详细讲解推荐廖雪峰的官方网站<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a>，该教程讲解细致，浅显易懂，对我有很大帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是目前世界上最先进的分布式版本控制系统。&lt;br&gt;gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。&lt;/p&gt;
    
    </summary>
    
      <category term="实用指南" scheme="https://RosamondTao.github.io/categories/%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="git" scheme="https://RosamondTao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>thinking</title>
    <link href="https://RosamondTao.github.io/2018/10/18/thinking/"/>
    <id>https://RosamondTao.github.io/2018/10/18/thinking/</id>
    <published>2018-10-18T15:17:01.000Z</published>
    <updated>2018-10-18T15:35:05.596Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="测试" scheme="https://RosamondTao.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="emmmm" scheme="https://RosamondTao.github.io/tags/emmmm/"/>
    
      <category term="yoooo" scheme="https://RosamondTao.github.io/tags/yoooo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://RosamondTao.github.io/2018/10/11/hello-world/"/>
    <id>https://RosamondTao.github.io/2018/10/11/hello-world/</id>
    <published>2018-10-11T13:40:44.008Z</published>
    <updated>2018-10-17T16:14:11.627Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="IM-GENIUS"><a href="#IM-GENIUS" class="headerlink" title="IM GENIUS"></a>IM GENIUS</h2><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;IM-GENIUS&quot;&gt;&lt;a href=&quot;#IM-GENIUS&quot; class=&quot;headerlink&quot; title=&quot;IM GENIUS&quot;&gt;&lt;/a&gt;IM GENIUS&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
